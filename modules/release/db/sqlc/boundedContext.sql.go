// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: boundedContext.sql

package db

import (
	"context"
)

const createbounded_contexts = `-- name: Createbounded_contexts :one
INSERT INTO bounded_contexts (
    name,
    manager
) VALUES (
    $1,
    $2
) RETURNING id, name, manager, created_at
`

type Createbounded_contextsParams struct {
	Name    string `json:"name"`
	Manager string `json:"manager"`
}

func (q *Queries) Createbounded_contexts(ctx context.Context, arg Createbounded_contextsParams) (BoundedContext, error) {
	row := q.db.QueryRowContext(ctx, createbounded_contexts, arg.Name, arg.Manager)
	var i BoundedContext
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Manager,
		&i.CreatedAt,
	)
	return i, err
}

const deletebounded_contexts = `-- name: Deletebounded_contexts :exec
DELETE FROM bounded_contexts
WHERE id = $1
`

func (q *Queries) Deletebounded_contexts(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletebounded_contexts, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, name, manager, created_at FROM bounded_contexts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (BoundedContext, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i BoundedContext
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Manager,
		&i.CreatedAt,
	)
	return i, err
}

const listbounded_contexts = `-- name: Listbounded_contexts :many
SELECT id, name, manager, created_at FROM bounded_contexts
ORDER BY name
LIMIT $1
OFFSET $2
`

type Listbounded_contextsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) Listbounded_contexts(ctx context.Context, arg Listbounded_contextsParams) ([]BoundedContext, error) {
	rows, err := q.db.QueryContext(ctx, listbounded_contexts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BoundedContext{}
	for rows.Next() {
		var i BoundedContext
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Manager,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
